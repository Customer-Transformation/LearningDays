#!/usr/bin/env node
export type ProcessedFile = {
    fileName: string;
    content: string;
};
export declare function processFiles(options: {
    inputDirs?: string[];
    inputDir?: string;
    outputFilePath?: string | null;
    useDefaultIgnores?: boolean;
    removeWhitespaceFlag?: boolean;
    ignoreFile?: string;
    silent?: boolean;
    additionalDefaultIgnores?: string[];
}): Promise<{
    files: ProcessedFile[];
    stats: {
        totalFiles: number;
        includedCount: number;
        defaultIgnoredCount: number;
        customIgnoredCount: number;
        binaryAndSvgFileCount: number;
        includedFiles: string[];
        fileSizeInBytes: number;
    };
}>;
export declare function generateDigestContent(options: {
    inputDirs?: string[];
    inputDir?: string;
    outputFilePath?: string | null;
    useDefaultIgnores?: boolean;
    removeWhitespaceFlag?: boolean;
    ignoreFile?: string;
    silent?: boolean;
    additionalDefaultIgnores?: string[];
}): Promise<{
    content: string;
    files: ProcessedFile[];
    stats: {
        totalFiles: number;
        includedCount: number;
        defaultIgnoredCount: number;
        customIgnoredCount: number;
        binaryAndSvgFileCount: number;
        includedFiles: string[];
        estimatedTokens: number;
        fileSizeInBytes: number;
    };
}>;
export declare function writeDigestToFile(content: string, outputFile: string, stats: {
    totalFiles: number;
    includedCount: number;
    defaultIgnoredCount: number;
    customIgnoredCount: number;
    binaryAndSvgFileCount: number;
    includedFiles: string[];
    estimatedTokens: number;
    fileSizeInBytes: number;
}, showOutputFiles?: string | boolean, fileSizes?: Record<string, number>): Promise<void>;
export declare function generateDigest(options?: {
    inputDir?: string;
    inputDirs?: string[];
    outputFile?: string | null;
    useDefaultIgnores?: boolean;
    removeWhitespaceFlag?: boolean;
    ignoreFile?: string;
    showOutputFiles?: boolean | string;
    silent?: boolean;
}): Promise<string | void>;
export declare function generateDigestFiles(options?: {
    inputDir?: string;
    inputDirs?: string[];
    outputFile?: string | null;
    useDefaultIgnores?: boolean;
    removeWhitespaceFlag?: boolean;
    ignoreFile?: string;
    silent?: boolean;
    additionalDefaultIgnores?: string[];
}): Promise<{
    files: ProcessedFile[];
}>;
export declare function getFileStats(options?: {
    inputDir?: string;
    inputDirs?: string[];
    outputFile?: string | null;
    useDefaultIgnores?: boolean;
    ignoreFile?: string;
    silent?: boolean;
    additionalDefaultIgnores?: string[];
}): Promise<{
    files: Array<{
        path: string;
        sizeInBytes: number;
    }>;
    totalGptTokens: number;
    totalClaudeTokens: number;
}>;
declare const _default: {
    generateDigest: typeof generateDigest;
    generateDigestFiles: typeof generateDigestFiles;
    generateDigestContent: typeof generateDigestContent;
    writeDigestToFile: typeof writeDigestToFile;
    processFiles: typeof processFiles;
    getFileStats: typeof getFileStats;
};
export default _default;
//# sourceMappingURL=index.d.ts.map